<div style='width: ${elementWidth}px; height: ${elementHeight}px;
	#if(${backgroundColor}) 
		background-color: \#${backgroundColor};
	#end
'>
	<div id='${mapCanvasId}' style='width: 100%; height: 100%; overflow: auto'></div>
	<div class="jr_map_legend_wrapper" style="display: none;">
		<div id="${mapCanvasId}_legend" dragable="false" style="display: flex;justify-content:flex-start;font-family:Roboto,Arial,sans-serif;background-color:#fff;margin:10px;border-radius:2px;user-select:none;padding:5px 10px 5px 10px;overflow:auto;"></div>
	</div>
</div>

#if (!${gotReportContext})
	#if (${exporterFirstAttempt})
		#if(${reqParams})
	<script src='https://maps.googleapis.com/maps/api/js?${reqParams}&callback=initMap' defer></script>
		#else
	<script src='https://maps.googleapis.com/maps/api/js?callback=initMap' defer></script>
		#end
	<script src='https://unpkg.com/@googlemaps/markerclusterer/dist/index.min.js' defer></script>
	<script src='https://cdnjs.cloudflare.com/ajax/libs/OverlappingMarkerSpiderfier/1.0.3/oms.min.js' defer></script>
	<script type="text/javascript">
		${jasperreportsMapApiScript}
	</script>
	#end
	<script type="text/javascript">
		window.addEventListener('DOMContentLoaded', () => {
			var globalUseMarkerClustering = ${useMarkerClustering},
				globalUseMarkerSpidering = ${useMarkerSpidering},
				mapCanvasId = "${mapCanvasId}",
				defaultMarkerIcon = "${defaultMarkerIcon}",
				map = new google.maps.Map(document.getElementById(mapCanvasId), {
					zoom: ${zoom},
					center: new google.maps.LatLng(${latitude}, ${longitude}),
					mapTypeId: google.maps.MapTypeId.${mapType},
					autocloseinfo: true
				});

			#*
				markerList is {} or
				{
					"marker_series_0": {
						"markerClustering": true,
						"markerSpidering": true,
						"markers": []
					},
					"marker_series_1": {}
					...
				}
			*#
			var markerSeries = ${markerList};
			var markerSeriesConfigBySeriesName = jasperreports.map.placeSeriesMarkers(map, markerSeries, false, globalUseMarkerSpidering);

			// enable marker spidering only for the configured series
			var overlappingMarkerSpiderfier = jasperreports.map.enableSpidering(map, markerSeriesConfigBySeriesName);

			// enable marker clustering globally and/or per series
			var markerClustersBySeriesName = jasperreports.map.enableClustering(map, markerSeriesConfigBySeriesName, globalUseMarkerClustering);

			// draw marker legend
			var legendProperties = ${legendProperties};
			jasperreports.map.drawLegend(legendProperties, map, mapCanvasId, markerSeriesConfigBySeriesName,
					markerClustersBySeriesName, overlappingMarkerSpiderfier, defaultMarkerIcon, false);

			// draw resetMap control
			var resetMapProperties = ${resetMapProperties};
			jasperreports.map.drawResetMap(resetMapProperties, map, ${latitude}, ${longitude}, ${zoom});

			// draw paths
			var paths = ${pathsList};
			jasperreports.map.drawPaths(paths, map, false);
		});
	</script>
#end